name: Java CI/CD with MySQL to ECR

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select deployment environment"
        required: true
        default: "uat-edfx"

env:
  JAVA_VERSION: '17'
  ECR_REPOSITORY: 'business-management-app'
  PROJECT_DIR: '${{ github.workspace }}/Business_Management_Project'
    
jobs:
  test:
    name: Run Tests with MySQL
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: business_db
          MYSQL_USER: app_user
          MYSQL_PASSWORD: app_password
          MYSQL_ROOT_PASSWORD: root_password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Wait for MySQL to be ready
      run: |
        sudo apt-get install -y mysql-client
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -u"root" -p"root_password" --silent; do
          sleep 1
        done

    - name: Create test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "
        CREATE DATABASE IF NOT EXISTS business_test;
        CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';
        GRANT ALL PRIVILEGES ON business_test.* TO 'test_user'@'%';
        FLUSH PRIVILEGES;"

    - name: Run tests with MySQL
      run: |
        mvn test
      working-directory: ${{ env.PROJECT_DIR }}
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/business_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password
        SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: Business_Management_Project/target/surefire-reports/
        retention-days: 7

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: test
    # if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build application JAR
      run: mvn clean package -DskipTests
      working-directory: ${{ env.PROJECT_DIR }}

    - name: Generate Dockerfile
      run: |
            cat <<'EOF' > ${{ env.PROJECT_DIR }}/Dockerfile
            FROM eclipse-temurin:17-jdk-alpine
            WORKDIR /app
            COPY target/*.jar app.jar
            EXPOSE 8080
            ENTRYPOINT ["java", "-jar", "app.jar"]
            EOF
    
    - name: Verify Dockerfile and JAR
      run: |
        echo "=== Verifying Dockerfile ==="
        cat ${{ env.PROJECT_DIR }}/Dockerfile
        echo "=== Verifying JAR file ==="
        ls -la ${{ env.PROJECT_DIR }}/target/*.jar

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE_ARN }}
        role-session-name: GitHubActions-BusinessApp

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract version and metadata
      id: meta
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      working-directory: ${{ env.PROJECT_DIR }}

    - name: Build Docker image
      run: |
        docker build \
          --tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }} \
          --tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest \
          .
      working-directory: ${{ env.PROJECT_DIR }}

    - name: Run Trivy vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: 1
        severity: 'CRITICAL,HIGH' 

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()  # Upload results even if scan fails
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Push Docker image to ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

    - name: Print deployment information
      run: |
        echo "Successfully deployed Business Management App to ECR!"
        echo "Repository: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
        echo "Version: ${{ steps.meta.outputs.version }}"